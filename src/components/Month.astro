---
import {DayData, BonesDayType} from '../lib/bones.js';
import {Month} from '../lib/calendar.js';
import {paginate} from '../lib/paginate.js';

const { month: month_, forecasts: forecasts_, class: className } = Astro.props;
const month = month_ as Month;
const forecasts = forecasts_ as Map<string, DayData>;

const monthName = [null, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][month.month];
if (monthName === null) throw new Error(`Unkjnown month: ${month.month}`);

const MAX_ROWS_IN_MONTH = 6;

const days = Array(MAX_ROWS_IN_MONTH * 7).fill(undefined).map((_, i) => {
    if (i < month.firstStartsOn) return 'EMPTY' as const;
    const dayIdx = i - month.firstStartsOn;
    if (dayIdx >= month.daysInMonth) return 'EMPTY' as const;
    const day = month.days[dayIdx];
    if (!day) throw new Error(`Day ${dayIdx} is undefined (=${i} - ${month.firstStartsOn}). Month: ${JSON.stringify(month)}`);

    const forecast = forecasts.get(day.asIsoString());
    if (!forecast) {
        return [day, ''] as const;
    }

    if (forecast.forecast === BonesDayType.BONES) {
        return [day, 'ü¶¥'] as const;
    } else if (forecast.forecast === BonesDayType.INDETERMINATE) {
        return [day, '‚ùî'] as const;
    } else {
        return [day, 'üö´'] as const;
    }
});

const weeks = paginate(days, 7);

---
<div class={className}>
<h4>{monthName}</h4>
<table>
    <thead>
        <tr>
            <th>S</th><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th>
        </tr>
    </thead>
    <tbody>
        {
            weeks.map(week => <tr>{
                week.map(day => {
                    if (day === 'EMPTY') {
                        return <td></td>;
                    } else {
                        const [date, label] = day;
                        if (!label) return <td class='no-verdict'>{date.d}</td>;
                        return <td><a href={`/forecast/${date.asIsoString()}`}>{date.d}<span class='verdict'>{label}</span></a></td>;
                    }
                })
            }</tr>)
        }
    </tbody>
</table>
</div>

<style>
span.verdict {
    display: block;
    font-size: 0.6em;
}

table td {
    background-color: #eee;
    padding: 0;
    text-align: center;
    height: 3em;
    width: 3em;
}

table td.no-verdict {
    padding: 8px;
    vertical-align: top;
}

table td a {
    display: block;
    height: 100%;
    width: 100%;
    padding: 8px;
    text-decoration: none;
}

table td a:hover {
    background-color: #ddd;
}

@media screen and (max-width: 40rem) {
    table {
        font-size: 0.7em;
    }
    table td {
        width: 2.75em;
    }
}

@media (prefers-color-scheme: dark) {
    table td {
        background-color: #222;
    }

    table td a:hover {
        background-color: #333;
    }
}

</style>